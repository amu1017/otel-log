# OpenTelemetry Python ログ設定ファイル (YAML形式)
#
# このファイルは Python標準ライブラリの logging モジュールの設定を定義します。
# OpenTelemetry との統合により、通常のログ出力と同時に
# OpenTelemetry 形式でのテレメトリーデータも送信されます。
#
# 【設定のポイント】
# 1. Console Handler: 従来通りの標準出力
# 2. OpenTelemetry Integration: コード内で LoggingHandler を設定
# 3. Root Logger: 全てのログメッセージを処理
# 4. Package Level Logger: パッケージ固有のログレベル設定

version: 1
disable_existing_loggers: false

# ログフォーマッターの定義
formatters:
  # コンソール出力用のフォーマッター
  console:
    format: '%(asctime)s [%(levelname)8s] %(name)s: %(message)s'
    datefmt: '%Y-%m-%d %H:%M:%S'
  
  # 詳細情報付きフォーマッター（デバッグ用）
  detailed:
    format: '%(asctime)s [%(levelname)8s] %(name)s [%(filename)s:%(lineno)d] %(funcName)s() - %(message)s'
    datefmt: '%Y-%m-%d %H:%M:%S'
  
  # JSON形式フォーマッター（構造化ログ）
  json:
    format: '{"timestamp": "%(asctime)s", "level": "%(levelname)s", "logger": "%(name)s", "message": "%(message)s"}'
    datefmt: '%Y-%m-%dT%H:%M:%S'

# ログハンドラーの定義
handlers:
  # コンソール出力ハンドラー
  # アプリケーション実行時にログを画面で確認するため
  console:
    class: logging.StreamHandler
    level: INFO
    formatter: console
    stream: ext://sys.stdout
  
  # ファイル出力ハンドラー（オプション）
  # ログをファイルに保存したい場合に使用
  file:
    class: logging.handlers.RotatingFileHandler
    level: DEBUG
    formatter: detailed
    filename: logs/application.log
    maxBytes: 10485760  # 10MB
    backupCount: 5
    encoding: utf8

# ロガーの定義
loggers:
  # アプリケーション固有のロガー設定
  example_otel:
    level: DEBUG
    handlers: [console]
    propagate: false
  
  # OpenTelemetry関連のロガー設定
  opentelemetry:
    level: INFO
    handlers: [console]
    propagate: false
  
  # gRPC関連のログレベル調整（ノイズ削減）
  grpc:
    level: WARNING
    handlers: [console]
    propagate: false

# ルートロガーの設定
# 全てのログメッセージがここを通る
root:
  level: INFO
  handlers: [console]

# 追加設定
incremental: false